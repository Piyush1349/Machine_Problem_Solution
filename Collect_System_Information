Make a Regulator to Gather Framework Data
Make another regulator named MonitoringController.

utilizing Framework;
utilizing System.Diagnostics;
utilizing System.Linq;
utilizing System.Net.NetworkInformation;
utilizing Microsoft.AspNetCore.Mvc;

namespace SystemMonitoringApp.Controllers
{
    public class MonitoringController : Regulator
    {
        private readonly MonitoringContext _context;

        public MonitoringController(MonitoringContext setting)
        {
            _setting = setting;
        }

        public IActionResult File()
        {
            var cpuUsage = GetCpuUsage();
            var ipDetails = GetIpDetails();

            // Save to information base
            SaveToDatabase(cpuUsage, ipDetails);

            // Return the information to the view (discretionary)
            ViewBag.CpuUsage = cpuUsage;
            ViewBag.IpDetails = ipDetails;

            bring Perspective back();
        }

        confidential float GetCpuUsage()
        {
            utilizing (var cpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total"))
            {
                // This call gives a substantial worth solely after some postponement
                cpuCounter.NextValue();
                System.Threading.Thread.Sleep(1000);
                bring cpuCounter.NextValue back();
            }
        }

        confidential string GetIpDetails()
        {
            var networkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
            var ipAddress = string.Empty;

            foreach (var ni in networkInterfaces)
            {
                var ipProperties = ni.GetIPProperties();
                var unicastAddresses = ipProperties.UnicastAddresses;
                foreach (var address in unicastAddresses)
                {
                    if (address.Address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        ipAddress += address.Address.ToString() + " ";
                    }
                }
            }
            return ipAddress.Trim();
        }

        confidential void SaveToDatabase(float cpuUsage, string ipDetails)
        {
            var monitoringData = new MonitoringData
            {
                CpuUsage = cpuUsage,
                IpDetails = ipDetails
            };

            _context.MonitoringData.Add(monitoringData);
            _context.SaveChanges();
        }
    }
}

dotnet add bundle Microsoft.EntityFrameworkCore.SqlServer
dotnet add bundle Microsoft.EntityFrameworkCore.Tools
